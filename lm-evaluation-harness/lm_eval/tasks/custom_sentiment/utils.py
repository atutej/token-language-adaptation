import argparse
from typing import Dict, List
import numpy as np
import yaml


# Different languages that are part of xnli.
# These correspond to dataset names (Subsets) on HuggingFace.
# A yaml file is generated by this script for each language.

#base_prompt = "<s>[INST]\n<<SYS>>\nAnalyze the text in the content and evaluate the overall sentiment. Answer with just \"Positive\" or \"Negative\".\n<</SYS>>\n\n{{INDIC_REVIEW}}: "
base_prompt = "Analyze the text in the content and evaluate the overall sentiment. Answer with just \"Positive\" or \"Negative\". \n{{TARGET_REVIEW}}. The sentiment is: "


LANGUAGES = {
    "tr": {
            "positive": "Positive",
            "negative": "Negative",
        },
    "en": {
            "positive": "Positive",
            "negative": "Negative",
        },
}

def doc_to_target(doc):
    label = doc["LABEL"]
    #labels = ["Negative", "Positive"]
    labels = {"Negative": 0, "Positive": 1}
    #print(label)
    if label is None:
        return np.random.randint(2)
    else:
        return labels[label]


def gen_lang_yamls(output_dir: str, overwrite: bool) -> None:
    """
    Generate a yaml file for each language.

    :param output_dir: The directory to output the files to.
    :param overwrite: Whether to overwrite files if they already exist.
    """
    err = []
    for lang in LANGUAGES.keys():
        file_name = f"customsentiment_{lang}.yaml"
        try:
            #POSITIVE_LABEL = LANGUAGES[lang]["positive"]
            POSITIVE_LABEL = "Positive"
            NEGATIVE_LABEL = "Negative"
            #NEGATIVE_LABEL = LANGUAGES[lang]["negative"]
            with open(
                f"{output_dir}/{file_name}", "w" if overwrite else "x", encoding="utf8"
            ) as f:
                f.write("# Generated by utils.py\n")
                yaml.dump(
                    {
                        "include": "custom_sentiment_common_yaml",
                        "dataset_name": "translation-" + lang,
                        "task": f"customsentiment_{lang}",
                        "doc_to_text": base_prompt,
                        #"doc_to_target": "LABEL",
                        "doc_to_choice": "{{[\"Negative\", \"Positive\"]}}",
                    },
                    f,
                    allow_unicode=True,
                )
        except FileExistsError:
            err.append(file_name)

    if len(err) > 0:
        raise FileExistsError(
            "Files were not created because they already exist (use --overwrite flag):"
            f" {', '.join(err)}"
        )


def main() -> None:
    """Parse CLI args and generate language-specific yaml files."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--overwrite",
        default=False,
        action="store_true",
        help="Overwrite files if they already exist",
    )
    parser.add_argument(
        "--output-dir", default=".", help="Directory to write yaml files to"
    )
    args = parser.parse_args()

    gen_lang_yamls(output_dir=args.output_dir, overwrite=args.overwrite)


if __name__ == "__main__":
    main()